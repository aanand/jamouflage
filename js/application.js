// Generated by CoffeeScript 1.3.3
(function() {
  var Generator, ImageDropper, init;

  init = function() {
    window.dropper = new ImageDropper($('.drop-target'));
    window.generator = new Generator(395, 395, 91);
    dropper.onImageDropped = function(image) {
      return generator.image(image);
    };
    return ko.applyBindings(generator);
  };

  Generator = (function() {
    var draw;

    draw = function(width, height, callback) {
      var canvas, output;
      canvas = document.createElement('canvas');
      canvas.width = width;
      canvas.height = height;
      callback(canvas.getContext('2d'));
      output = new Image;
      output.width = width;
      output.height = height;
      output.src = canvas.toDataURL();
      return output;
    };

    function Generator(jamvatarWidth, jamvatarHeight, jamvatarOffsetY) {
      var _this = this;
      this.image = ko.observable(null);
      this.scaleInput = ko.observable("100");
      this.yOffsetInput = ko.observable("0");
      this.backgroundImage = ko.computed(function() {
        var height, image, width;
        image = _this.image();
        if (image == null) {
          return null;
        }
        console.log("drawing backgroundImage");
        width = image.width * _this.scale();
        height = image.height * _this.scale();
        return draw(width, height, function(ctx) {
          return ctx.drawImage(image, 0, _this.yOffset(), width, height);
        });
      });
      this.jamvatarImage = ko.computed(function() {
        var backgroundImage;
        backgroundImage = _this.backgroundImage();
        if (backgroundImage == null) {
          return null;
        }
        console.log("drawing jamvatarImage");
        return draw(jamvatarWidth, jamvatarHeight, function(ctx) {
          var x, y;
          x = jamvatarWidth / 2 - backgroundImage.width / 2;
          y = -jamvatarOffsetY + _this.yOffset();
          return ctx.drawImage(_this.image(), x, y, backgroundImage.width, backgroundImage.height);
        });
      });
      this.wrapperCSS = ko.computed(function() {
        var css, image;
        css = "padding-top: " + jamvatarOffsetY + "px; background-color: pink;";
        if (image = _this.backgroundImage()) {
          css += "background-image: url(" + image.src + "); background-position: top center;";
        }
        return css;
      });
      this.jamvatarWrapperCSS = function() {
        return "width: " + jamvatarWidth + "px; height: " + jamvatarHeight + "px";
      };
      this.jamvatarCSS = ko.computed(function() {
        var css, image;
        css = "width: " + jamvatarWidth + "px; height: " + jamvatarHeight + "px; background-color: yellow;";
        if (image = _this.jamvatarImage()) {
          css += "background-image: url(" + image.src + ");";
        }
        return css;
      });
      this.showForm = ko.computed(function() {
        return _this.image() != null;
      });
    }

    Generator.prototype.scale = function() {
      return (Number(this.scaleInput()) || 100) / 100;
    };

    Generator.prototype.yOffset = function() {
      return Number(this.yOffsetInput()) || 0;
    };

    Generator.prototype.downloadBackground = function() {
      return window.open(this.backgroundImage().src);
    };

    Generator.prototype.downloadJamvatar = function() {
      return window.open(this.jamvatarImage().src);
    };

    return Generator;

  })();

  ImageDropper = (function() {

    function ImageDropper(target) {
      var _this = this;
      target = $(target);
      target.bind('dragover', function(event) {
        event.stopPropagation();
        event.preventDefault();
        return target.addClass('dragover');
      }).bind('dragout', function(event) {
        event.stopPropagation();
        event.preventDefault();
        return target.removeClass('dragover');
      }).bind('drop', function(event) {
        event.stopPropagation();
        event.preventDefault();
        target.removeClass('dragover');
        return _this.getImage(event.originalEvent.dataTransfer.files);
      });
    }

    ImageDropper.prototype.getImage = function(files) {
      var reader,
        _this = this;
      reader = new FileReader;
      reader.onload = function(event) {
        var img;
        img = new Image;
        img.src = event.target.result;
        return img.onload = function() {
          if (_this.onImageDropped != null) {
            return _this.onImageDropped(img);
          }
        };
      };
      return reader.readAsDataURL(files[0]);
    };

    return ImageDropper;

  })();

  init();

}).call(this);
